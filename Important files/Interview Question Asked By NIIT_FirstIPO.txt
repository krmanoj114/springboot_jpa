Given a list of employees, you need to filter all the employee whose age is greater than 20 and print the employee names.(Java 8 APIs only)
Given the list of employees, count number of employees with age 25?
Given the list of employees, find the employee with name “Mary”.
Given a list of employee, find maximum age of employee?
Given a list of employees, sort all the employee on the basis of age?


Code
====

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class Test {

    public static void main(String[] args) {
        List<Employee> empList = new ArrayList<>();
        empList.add(new Employee("Mohan", 45, 70001));
        empList.add(new Employee("Sohan", 40, 70009));
        empList.add(new Employee("Rohan", 35, 60001));
        empList.add(new Employee("Lakshman", 38, 69901));
        empList.add(new Employee("Mary", 25, 50001));
        empList.add(new Employee("Jeevan", 38, 90001));


        //Given a list of employees, you need to filter all the employee whose age is greater than 20 and print the employee names.(Java 8 APIs only)
        empList.stream().filter(e -> e.getAge() > 38).collect(Collectors.toList()).forEach(e ->System.out.println(e.getEmployeeName()));
        //Given the list of employees, count number of employees with age 25?
        long count = empList.stream().filter(e -> e.getAge() > 25).count();
        System.out.println("count = " + count);

        //Given the list of employees, find the employee with name “Mary”.
        empList.stream().filter(e ->e.getEmployeeName().equals("Mary")).forEach(e->System.out.println(e.getEmployeeName()));
        //empList.stream().filter(e -> e.getEmployeeName().equals("Mary")).forEach(System.out::println);

        //Given a list of employee, find maximum age of employee?
        Employee employee = empList.stream().max(Comparator.comparing(Employee::getAge)).get();
        Employee employee1 = empList.stream().min(Comparator.comparing(Employee::getAge)).get();
        System.out.println("Employ max age :"+employee.getEmployeeName()+"  Age ::"+employee.getAge());
        System.out.println("Employ min age :"+employee1.getEmployeeName()+"  Age ::"+employee1.getAge());
        //Given a list of employees, sort all the employee on the basis of age?
        empList.stream().sorted(Comparator.comparing(Employee::getAge).reversed()).collect(Collectors.toList()).forEach(e->System.out.println(e.getEmployeeName()+"<<<>>>"+e.getAge()));


    }
}


Employee
========

public class Employee {
    private String employeeName;
    private int age;
    private int employeeNo;

    public Employee(String employeeName, int age, int employeeNo) {
        this.employeeName = employeeName;
        this.age = age;
        this.employeeNo = employeeNo;
    }

    public String getEmployeeName() {
        return employeeName;
    }

    public void setEmployeeName(String employeeName) {
        this.employeeName = employeeName;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public int getEmployeeNo() {
        return employeeNo;
    }

    public void setEmployeeNo(int employeeNo) {
        this.employeeNo = employeeNo;
    }

  
}


